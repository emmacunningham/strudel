'use strict';
var strudel = strudel || {};




strudel.SpiralTimelineController = function(params) {

  // Number of rotations around the origin
  this.numRotations = 12;

  // Resolution of the datapoints drawn on curve
  this.resolution = .01;
  this.pathWeight = 1;

  // v and d are the range of the zoom.  We will make these user manipulable
  // when everything else works like gravy.
  this.zoomRangeStart = 0;
  this.zoomRangeEnd = 1;


  // Math Utils helper
  this.utils = new strudel.MathUtils();

  // Init view properties
  this.width = 960;
  this.height = 600;
  this.radius = Math.min(this.width, this.height) / 2 - 30;

  // Generates function constraining domain and range of graph
  // From what I can tell manipulating the domain values, it seems to just
  // hange the scaling of the graph within the viewport.
  this.r = d3.scale.linear()
      .domain([0, this.numRotations])
      .range([0, this.radius]);

  // For now, dummy data.  When we work with real data we'll want to
  // provide a method that allows you to import JSON or somethin.
  this.datapoints = d3.range(0, 12 * Math.PI, .500);

  // Generates function which will apply a transformation to the data points
  // generated by our spiral function and return cartesian coordinates
  // used by the <path> element.  The function used in the angle setter is
  // changing the data values to orient the graph correctly.
  var self = this;

  this.line = d3.svg.line.radial()
      .radius(function(data) {

        return self.r(data[1]);

      })
      .angle(function(data) {

        return Math.PI / 2 - data[0];

      });

  // Create <svg> element, append it to body, set width and height based on variables
  // defined above.  Also create the <g> element which will contain the <path> element.
  // Apply transformations to center the graph within the parent container.
  this.svg = d3.select("body").append("svg")
      .attr("width", this.width)
      .attr("height", this.height)
    .append("g")
      .attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")");

  // Create <path> element with class line and append it to svg's last child <g>
  this.svg.append("path")
      .attr("class", "line");

  this.addSliderListeners();

  this.initSliders();
  this.initColorPicker();
};

// Updates the spiral data per the value of the input range slider.
strudel.SpiralTimelineController.prototype.update = function(zoomRangeStart, zoomRangeEnd) {

  // Generates new data points based on the input value
  this.zoomRangeStart = zoomRangeStart;
  this.zoomRangeEnd = zoomRangeEnd;

  var newData = d3.range(0, this.numRotations * 2 * Math.PI, this.resolution).map(this.newDataGenerator(this.zoomRangeEnd , this.zoomRangeStart, this.numRotations));

  // Apply those new data points.  D3 will use the radial line function
  // that we have previously defined above to map those values to Cartesian coordinates
  // so we need to update the value of the d attribute on the <path> element
  this.svg.selectAll(".line")
    .datum(newData)
    .attr("d", this.line)

  //this.updatePoints(zoomRangeStart, zoomRangeEnd);

};

strudel.SpiralTimelineController.prototype.updateRotations = function(n) {

  // adjust the text on the range slider
  d3.select("#r-value").text(n);
  d3.select("#rotationSlider").property("value", n);

  this.numRotations = n;

  this.r = d3.scale.linear()
      .domain([0, this.numRotations])
      .range([0, this.radius]);

  var newData = d3.range(0, this.numRotations * 2 * Math.PI, this.resolution).map(this.newDataGenerator(this.zoomRangeStart, this.zoomRangeEnd, this.numRotations));


  // Apply those new data points.  D3 will use the radial line function
  // that we have previously defined above to map those values to Cartesian coordinates
  // so we need to update the value of the d attribute on the <path> element
  this.svg.selectAll(".line")
    .datum(newData)
    .attr("d", this.line)

  d3.selectAll('.rangeSlider')
    .attr("max", n)

  this.updatePoints(this.zoomRangeStart, this.zoomRangeEnd);

};

strudel.SpiralTimelineController.prototype.updateResolution = function(n) {

  // adjust the text on the range slider
  d3.select("#res-value").text(n);
  d3.select("#resolutionSlider").property("value", n);

  this.resolution = n;

  // Generates new data points based on the input value
  //var newData = d3.range(0, 12 * Math.PI, .01).map(inputDataGenerator(n, numRevolutions));

  var newData = d3.range(0, this.numRotations * 2 * Math.PI, this.resolution).map(this.newDataGenerator(this.zoomRangeStart, this.zoomRangeEnd, this.numRotations));


  // Apply those new data points.  D3 will use the radial line function
  // that we have previously defined above to map those values to Cartesian coordinates
  // so we need to update the value of the d attribute on the <path> element
  this.svg.selectAll(".line")
    .datum(newData)
    .attr("d", this.line);

};

strudel.SpiralTimelineController.prototype.updatePathWeight = function(n) {

  // adjust the text on the range slider
  d3.select("#path-weight-value").text(n);
  d3.select("#path-weight").property("value", n);

  this.pathWeight = n;


  // Apply those new data points.  D3 will use the radial line function
  // that we have previously defined above to map those values to Cartesian coordinates
  // so we need to update the value of the d attribute on the <path> element
  this.svg.selectAll(".line")
    .style('stroke-width', this.pathWeight + 'px');

};

// Color picker
strudel.SpiralTimelineController.prototype.updateColor = function(hsb,hex,rgb,el,bySetColor) {
  var hexStr = '#' + hex;
  this.svg.selectAll(".line")
    .style('stroke', hexStr);

};


strudel.SpiralTimelineController.prototype.initColorPicker = function() {
  var self = this;
  $('#color-picker').colpick({
    flat:true,
    layout:'hex',
    submit:0,
    onChange: self.updateColor,
    color: '#ff0000'
  });
};


// Initial starting value of input sliders.
strudel.SpiralTimelineController.prototype.initSliders = function() {

  d3.select("#d-value").text(this.zoomRangeStart);
  d3.select("#d").property("value", this.zoomRangeStart);
  d3.select("#v-value").text(this.zoomRangeEnd);
  d3.select("#v").property("value", this.zoomRangeEnd);

  this.update(this.zoomRangeStart, this.zoomRangeEnd);
  this.updateRotations(this.numRotations);
  this.updateResolution(this.resolution);
  this.updatePathWeight(this.pathWeight);

};

strudel.SpiralTimelineController.prototype.addSliderListeners = function() {
  var self = this;


  // Select the <input> range element and attaches a listener to when the input
  // value changes.  On input change, call "update" function with the new value.
  d3.selectAll(".rangeSlider").on("input", function() {
    var id = this.id;

    var zoomRangeStart = d3.select("#d")[0][0].value;
    var zoomRangeEnd = d3.select("#v")[0][0].value;

    // There's surely a better way to do this but saving that for a refactor
    switch (id) {
      case 'd':
        d3.select("#d-value").text(zoomRangeStart);
        d3.select("#d").property("value", zoomRangeStart);
        break;
      case 'v':
        d3.select("#v-value").text(zoomRangeEnd);
        d3.select("#v").property("value", zoomRangeEnd);
        break;
    }


    self.update(Number(zoomRangeStart), Number(zoomRangeEnd));

  });


  // Select the <input> rotation element and attaches a listener to when the input
  // value changes.  On input change, call "updateRotations" function with the new value.
  d3.select("#rotationSlider").on("input", function() {
    self.updateRotations(+Number(this.value));
  });

  // Select the <input> rotation element and attaches a listener to when the input
  // value changes.  On input change, call "updateResolution" function with the new value.
  d3.select("#resolutionSlider").on("input", function() {
    self.updateResolution(+Number(this.value));
  });


  // Select the <input> rotation element and attaches a listener to when the input
  // value changes.  On input change, call "updatePathWeight" function with the new value.
  d3.select("#path-weight").on("input", function() {
    self.updatePathWeight(+Number(this.value));
  });

};

strudel.SpiralTimelineController.prototype.newHotness = function(theta, zoomRangeStart, zoomRangeEnd, l) {
  var z = this.utils.getZ(zoomRangeStart, zoomRangeEnd, l);
  var p = this.utils.getP(z, zoomRangeStart, zoomRangeEnd);
  var w = this.utils.getW(zoomRangeStart, zoomRangeEnd);
  var bigP = this.utils.getBigP(p, l, w);
  var o = this.utils.getO(zoomRangeStart, zoomRangeEnd);

  var c = this.utils.getC(o, w, l, bigP);


  var origData = this.spiralF(theta, p, l);

  var thetaOver2PiMinusC =
    (theta / 2*Math.PI) - c;

  var newTopPartOne = Math.exp(thetaOver2PiMinusC / o);
  var newTopPartTwo = Math.exp(p * (l - (theta / 2*Math.PI)));
  var newTop = newTopPartOne + newTopPartTwo;
  var newBottom = Math.exp(thetaOver2PiMinusC / o) + 1;
  var newStuff = newTop / newBottom;
  var result = newStuff * origData;

  return result;

};

strudel.SpiralTimelineController.prototype.newDataGenerator = function(zoomRangeStart, zoomRangeEnd, l) {
  var self = this;

  var spiralDataGenerator = function(theta) {
    return [theta, self.newHotness(theta, zoomRangeStart, zoomRangeEnd, l)];
  };

  return spiralDataGenerator;

};

strudel.SpiralTimelineController.prototype.spiralF = function(theta, p, r) {
  return r*(Math.exp((theta*p)/(2*Math.PI))-1)/(Math.exp(p*r)-1);
};

// Update data points on curve
strudel.SpiralTimelineController.prototype.updatePoints = function (zoomRangeStart, zoomRangeEnd) {
  var self = this;

  // Getting closer...
  var plotData = this.datapoints.map(this.newDataGenerator(zoomRangeStart, zoomRangeEnd, this.numRotations));

  // NB: not sure exactly why but we also had to apply the
  // scaling function to the denominator of Math.PI in the representation
  // of the angle (i.e. Math.PI / ___ - d[0]).  It fits the points along
  // the curve correctly when we do that so?
  var polarToCarX = function(d) {
    return self.r(d[1]) * Math.cos(-d[0]);
  };

  var polarToCarY = function(d) {
    return self.r(d[1]) * Math.sin(-d[0]);
  };

  var circle = this.svg.selectAll("circle")
      .data(plotData);


  var sizes = [];
  circle.exit().remove();

  circle.enter().append("circle")
    .attr('r', function(d) {
        var size = Math.sqrt(d[1]);

        return size;

     })

  circle
      .attr("cx", function (d) { return polarToCarX(d); })
      .attr("cy", function (d) { return polarToCarY(d); });



};